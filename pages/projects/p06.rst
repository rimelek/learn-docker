.. _nginx-proxy: https://hub.docker.com/r/nginxproxy/nginx-proxy

=======================================================================
Run multiple Docker Compose projects on the same port using nginx-proxy
=======================================================================

See `nginx-proxy`_

Go to Project 6 from the git repository root:

.. code:: bash

  cd projects/p06

Project structure:

.. code:: text

  .
  ├── nginxproxy
  │   └── docker-compose.yml
  ├── web1
  │   ├── Dockerfile
  │   ├── docker-compose.yml
  │   └── www
  │       └── index.php
  └── web2
      ├── Dockerfile
      ├── docker-compose.yml
      └── www
          └── index.php

We will need a proxy network which will be used by all of the compose projects
for the communication between NGinX and the webservers:

.. code:: bash

  docker network create public_proxy

Check the networks:

.. code:: bash

  docker network ls

Navigate to the nginxproxy folder

.. code:: bash

  cd nginxproxy

The compose file is the following:

.. literalinclude:: ../../projects/p06/nginxproxy/docker-compose.yml
  :language: yaml

Start the proxy:

.. code:: bash

  docker compose up -d

Navigate to the web1 folder:

.. code:: bash

  cd ../web1

Here you will have a compose file:

.. literalinclude:: ../../projects/p06/web1/docker-compose.yml
  :language: yaml

a Dockerfile

.. literalinclude:: ../../projects/p06/web1/Dockerfile
  :language: Dockerfile

and the PHP file

.. literalinclude:: ../../projects/p06/web1/www/index.php
  :language: php

At this point you need to have the NIP variable set as :doc:`../../index` refers to it.
Alternative option: set the NIP variable in a ".env" file.

Start the containers:

.. code:: bash

  docker-compose up -d

In case of working in the cloned repository of this tutorial, you can also run the below command to set the variable

.. code:: bash

  NIP=$(../../../system/usr/local/bin/nip.sh) docker compose up -d

Navigate to the web2 folder:

.. code:: bash

  cd ../web2

The compose file is similar to the previous one:

.. literalinclude:: ../../projects/p06/web2/docker-compose.yml
  :language: yaml

we also have another Dockerfile

.. literalinclude:: ../../projects/p06/web2/Dockerfile
  :language: Dockerfile

and a PHP file

.. literalinclude:: ../../projects/p06/web2/www/index.php
  :language: php

Start the containers:

.. code:: bash

  docker compose up -d

Or you can use :code:`nip.sh` as we did in web1.

Both of the services are available on port 80. Example:

.. code:: text

  http://web1.192.168.1.6.nip.io
  http://web2.192.168.1.6.nip.io

This way you do not need to remove a container just because it is running on the same port you want to use for a new container.

Clean the project:

.. code:: bash

  docker compose down --volumes
  cd ../web1
  docker compose down --volumes
  cd ../nginxproxy
  docker compose down --volumes
