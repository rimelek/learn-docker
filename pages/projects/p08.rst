=====================================
Memory limit test in a Bash container
=====================================

.. include:: ../projects-header.rst

Go to Project 8 from the git repository root:

.. code:: bash

  cd projects/p08

Project structure:

.. code:: text

  .
  └── docker-compose.yml

Files
=====

**docker-compose.yml**

.. literalinclude:: ../../projects/p08/docker-compose.yml
  :language: yaml

Description
===========

This example shows the memory testing in a bash container, where the "fallocate"
command generates a file with a defined size stored in memory using tmpfs.
We use an environment variable to set the allocated memory and the memory limit is defined in the compose file as 50 MiB.

Start the test
==============

The container will have 50MB memory limit. (It must be at least 6MB in Docker Compose 1.27.4). 
The examples below will test the memory usage from 10MB to 50MB increased by 10MB for each test.

.. code:: bash

  ALLOCATE=10MiB docker compose run --rm test
  ALLOCATE=20MiB docker compose run --rm test
  ALLOCATE=30MiB docker compose run --rm test
  ALLOCATE=40MiB docker compose run --rm test
  ALLOCATE=50MiB docker compose run --rm test


Running it in Docker Desktop on macOS I get the following output:

.. code:: text

  fallocate: fallocate '/app/test': Out of memory
  Out of memory

Running it on a virtual machine with an Ubuntu 20.04 host the output is:

.. code:: text

  Out of memory

Since there is some additional memory usage in the container, it kills the process at 50MiB even though 50 is still allowed.

Explanation of the parameters
=============================

The "docker compose run" is similar to "docker run", but it runs a service from the compose file.
"--rm" means the same as it meant for "docker run". Deletes the container right after it stopped.

Clean the project:

.. code:: bash

  docker compose down

The containers were deleted automatically, but it can still delete the network. 
